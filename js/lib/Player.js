// Generated by CoffeeScript 1.3.3
(function() {
  var Player,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Player = (function(_super) {

    __extends(Player, _super);

    function Player(x, y, radius) {
      Player.__super__.constructor.call(this, x, y, radius, 0, 0, new Rgba(255, 0, 0, 0.9), 'black');
      this.last_bullet_shot = 0;
      this.age = 0;
    }

    Player.prototype.shoot = function() {
      var x, y, _ref;
      _ref = this.gunpoint(), x = _ref[0], y = _ref[1];
      if (this.last_bullet_shot + 10 < this.age) {
        bullets.push(new Bullet(x, y, this.radius * BULLET_SHOOTER_RATIO, this.x_velocity * 2, this.y_velocity * 2));
        this.last_bullet_shot = this.age;
      }
      return this.radius = this.radius * (1 - SHOOTER_SHOOT_LOSS);
    };

    Player.prototype.gunpoint = function() {
      return [this.x + this.width / 2, this.y + this.height / 2];
    };

    Player.prototype.update = function() {
      this.age++;
      if (keydown.left && -MAX_USER_SPEED <= this.x_velocity) {
        this.x_velocity = this.x_velocity - DEFAULT_USER_ACCELERATION;
      }
      if (keydown.right && this.x_velocity <= MAX_USER_SPEED) {
        this.x_velocity = this.x_velocity + DEFAULT_USER_ACCELERATION;
      }
      if (keydown.up && -MAX_USER_SPEED <= this.y_velocity) {
        this.y_velocity = this.y_velocity - DEFAULT_USER_ACCELERATION;
      }
      if (keydown.down && this.y_velocity <= MAX_USER_SPEED) {
        this.y_velocity = this.y_velocity + DEFAULT_USER_ACCELERATION;
      }
      this.setCircleBox();
      if (keydown.space) {
        this.shoot();
      }
      return Player.__super__.update.call(this);
    };

    Player.prototype.draw = function() {
      return Player.__super__.draw.call(this, true, true);
    };

    return Player;

  })(CircleMovingInGameObject);

}).call(this);
